{"version":3,"sources":["theor_logo.svg","components/Details.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Details","class","Component","Sidebar","className","href","target","rel","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,wC,6MCiC5BC,E,uKA9Bf,OACA,6BAIA,4CACA,yBAAKC,MAAM,WAAU,qLAIrB,yCACA,yBAAKA,MAAM,WAAU,4RACrB,kDACA,yBAAKA,MAAM,WACX,uDACA,+HAEA,yCACA,yBAAKA,MAAM,WAAU,8CACrB,wFACA,yDAAiC,6BACjC,qDACA,+DACA,0DACA,0CACA,yBAAKA,MAAM,WAAU,4D,GA3BCC,aCsCPC,E,uKApCX,OACI,6BACI,6CACA,4BACI,0DACA,2CACA,4BAAI,uBACAC,UAAU,WACVC,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAJJ,WAQJ,4BAAI,uBACAH,UAAU,WACVC,KAAK,sDACLC,OAAO,SACPC,IAAI,uBAJJ,cAQH,6BACL,sCACA,4BACI,iDACA,+CACA,8DACA,yDACA,gDACA,8D,GAhCML,aCoBPM,MAff,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,kBAAC,EAAD,OAGF,yBAAKP,UAAU,YACb,kBAAC,EAAD,SCHYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8cc9e926.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/theor_logo.54e0db15.svg\";","import React, { Component } from 'react'\r\nclass Details extends Component {\r\nrender() {\r\nreturn (\r\n<div>\r\n{/* Your Html/JSX code goes here */}\r\n\r\n\r\n<h1>INTRODUCTION</h1>\r\n<div class=\"written\"><p>The operating room is a \r\n            personal project used to showcase current talents \r\n            of Rebecca Szeto. The current site is built in Nodejs LTS with Reactjs LTS.</p></div>\r\n            \r\n<h1>OBJECTIVE</h1>\r\n<div class=\"written\"><p>Highly flexible individual with development skills seeks position as Applications Developer, enabling utilization of solutions consulting experience and knowledge in web-based systems architecture to successful address business problems through design.</p></div>\r\n<h1>CURRENT EXPERIENCE</h1>\r\n<div class=\"written\">\r\n<h2>CONSULTANT AT WASZ Inc.</h2>\r\n<p>Developed and executed EMR solution with out-patient vists tracking, reporting, and data trends</p>\r\n</div>\r\n<h1>EDUCATION</h1>\r\n<div class=\"written\"><h2>HUMBER COLLEGE</h2>\r\n<p>Post-graduate certificate: Information Technology Systems</p>\r\n<p>September 2013 - June 2015</p><br/>\r\n<h2>UNIVERSITY OF TORONTO</h2>\r\n<p>Major: Neuroscience | Psychology</p>\r\n<p>September 2009 - June 2013</p></div>\r\n<h1>REFERENCES</h1>\r\n<div class=\"written\"><p>Available upon request.</p></div>\r\n</div>\r\n)\r\n}\r\n}\r\nexport default Details","import React, { Component } from 'react'\r\nclass Sidebar extends Component {\r\nrender() {\r\n    return (\r\n        <nav>\r\n            <h3>REBECCA SZETO</h3>\r\n            <ul>\r\n                <li>Web Applications Developer</li>\r\n                <li>Toronto, ON</li>\r\n                <li><a\r\n                    className=\"App-link\"\r\n                    href=\"https://github.com/RebeccaSzeto\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    >\r\n                    Github\r\n                    </a></li>\r\n                <li><a\r\n                    className=\"App-link\"\r\n                    href=\"https://www.linkedin.com/in/rebecca-szeto-a0854893/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    >\r\n                    Linkedin\r\n                    </a></li>\r\n            </ul><br />\r\n            <h3>SKILLS</h3>\r\n            <ul>\r\n                <li>Critical thinking</li>\r\n                <li>Time management</li>\r\n                <li>Web language: nodejs + reactjs</li>\r\n                <li>Web DevOps: nginx + linux</li>\r\n                <li>App Language: C#</li>\r\n                <li>Mobile Language: Xamarin</li>\r\n            </ul>\r\n        </nav>\r\n        )\r\n    }\r\n}\r\nexport default Sidebar","import React from 'react';\nimport logo from './theor_logo.svg';\nimport './App.css';\nimport Details from './components/Details.js';\nimport Sidebar from './components/Sidebar.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />        \n        <Sidebar />\n      </header>\n      \n      <div className=\"App-body\">\n        <Details />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}